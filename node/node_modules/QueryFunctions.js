

module.exports = function(connection){
	var pass = require('pwd'),
	check = require('validator').check,
    sanitize = require('validator');

	var updatePassword = function(user, type){
  		if (type){
    		connection.query("UPDATE STAFF SET Salt=?, Password = ? WHERE StaffId=?;",[user.Salt, user.Password, user.StaffId], function(error, rows, file){
    		if (error) throw error;
    		});
  		}
  		else{
	    connection.query("UPDATE Student\n SET Salt=?, Password = ? WHERE StaffId=?;",[user.Salt, user.Password, user.StaffId], function(error, rows, file){
	    	if (error) throw error;
	    	});
  		}
  	}

	var hash = function(user, type){
	  pass.hash("password", function(error, salt, hash){
	    if (error) throw err;
	    user.Salt = salt;
	    user.Password = JSON.stringify(hash);
	    updatePassword(user, type);
	  })
	}

	var updateStart = function(){
	  connection.query("SELECT * FROM STUDENT;", function(error, rows, file){
	    for (row in rows){
	      userX = rows[row]
	      hash(userX, 0, pass); 
	    }
	  });
	  connection.query("SELECT * FROM STAFF;", function(error, rows, file){
	    for (row in rows){
	      userY = rows[row]
	      hash(userY, 1); 
	    }
	  });
	}

	var getAdvisor = function(StaffId, callback){
		connection.query("SELECT * FROM Staff WHERE StaffId= ?", StaffId, function(error, rows, file){
			if (error) throw err;
			callback(rows);
		});
	}

	var updateCourseList = function(data, school){
	  var values = [];
	  values.push(data.listName);
	  values.push(school);
	  values.push(sanitize.escape(data.listName));
	  connection.query("INSERT INTO Courselist (CourseListId, School) VALUES (?,?);",values, function(error, insertId){
	    if (error) throw error;
	  });
	}

	var updateCoursesTaken = function(matric, courseId, callback){
	  connection.query("INSERT IGNORE INTO StudentHasCourse (Matric, CourseId) VALUES (?,?) ON DUPLICATE KEY UPDATE CourseId=?;",[matric, courseId, courseId], function(error, insertId){
	    if (error) throw error;
	  });
	  callback(200);
	}

	var updateDegreeCourseLists = function(degree, school, year, courseList){
		var query1 = connection.query("INSERT INTO DegreeHasCourseList (Degree, CourseListId, Level, School) VALUES (?,?,?,?) ON DUPLICATE KEY UPDATE CourseListId=?;", [degree, courseList, year, school, courseList], function(error, rows, file){
			if (error) throw error;
		});
	}

	var deleteDegreeHasCourseListRow = function(degree, year, school){
		var queryDDHCLR = connection.query("DELETE FROM DegreeHasCourseList WHERE Degree=? AND Level=? AND School=?;", [degree, year, school], function(error, rows, file){
		});
	}

	var createSQL = function(values, start){
		var SQL = start;
	  	for (var i =0;i<values.length;i++){
	  		SQL = SQL.concat('(?)');
	  		if (i+1 != values.length){
	  			SQL = SQL.concat(',');
	  		}
	  	}
	  	SQL = SQL.concat(";");
	  	return SQL ;
	}

	var updateGroup = function(data){
		var groupValues = [];
		var groupCourseValues = []
		var groups = data.groups;
		for (var i=0; i<groups.length;i++){
			groupValues.push([groups[i].min,groups[i].max , data.listName, i])
			for (var j = 0; j<groups[i].courses.length;j++){
			  groupCourseValues.push([i, data.listName, groups[i].courses[j].CourseId])
			}
		}
	 	var SQL = createSQL(groupValues, "INSERT INTO Groups (Minimum, Maximum, CourseListId, GroupId) VALUES ");
		var thisQ = connection.query(SQL,groupValues, function(error, rows, file){
			if (error) throw error;
		});
		SQL = createSQL(groupCourseValues, "INSERT INTO GroupHasCourse (GroupId, CourseListId, CourseId) VALUES ");
		thisQ = connection.query(SQL,groupCourseValues, function(error, rows, file){
			if (error) throw error;
		}); 
	}

	var studentTakesCourses = function(matric, callback){
	  connection.query("SELECT Course.*, StudentHasCourse.Grade, StudentHasCourse.Status FROM Course INNER JOIN StudentHasCourse ON Course.CourseId = StudentHasCourse.CourseId WHERE StudentHasCourse.Matric = ?;", matric, function(error, rows, file){
	    callback(rows);
	  });
	}   

	var advisees = function(StaffId, callback){
	  connection.query("SELECT Student.Forename, Student.Matric, Student.Degree, Student.Year FROM Student WHERE Student.StaffId = ?", StaffId, function(error, rows, file){
	    callback(rows);
	  });
	} 

	var degrees = function(school, callback){
	  connection.query("SELECT Degree.Name FROM Degree WHERE Degree.School = ?", school, function(error, rows, file){
	    callback(rows);
	  });
	}  

	var singleDegree = function(degree, callback){
	  connection.query("SELECT * FROM Degree WHERE Degree.Name = ?", degree, function(error, rows, file){
	    callback(rows);
	  });
	} 

	var getStudentCourses = function(matric, callback){
	  connection.query("SELECT * FROM StudentHasCourse WHERE StudentHasCourse.Matric = ?", matric, function(error, rows, file){
	    callback(rows);
	  });
	} 

	var courseLists = function(school, callback){
	 	connection.query("SELECT * FROM CourseList WHERE School = ?", school, function(error, rows, file){
	    if (error) throw error;
	    callback(rows);
	  });
	}   

	var degreeCourseLists = function(degree, callback){
	 var queryDCL = connection.query("SELECT * FROM DegreeHasCourseList WHERE Degree = ? ORDER BY DegreeHasCourseList.Level", degree, function(error, rows, file){
	    if (error) throw error;
	    callback(rows);
	  });
	} 

	var getSchoolCourses = function(school, callback){
	  connection.query("Select * FROM Course WHERE Course.School = ?;", school, function(error, rows, file){
	    if (error) throw error;
	    callback(rows);
	    });
	} 

	var validUser = function(name, type, callback){
		connection.query("SELECT * FROM " + type + "\n WHERE Username= ?", name, function(error, rows, file){
			if (error) throw error;
	    	callback(error, rows, file);
		});
	}

	var degreeCourseListsTotal = function(degree, callback){
		connection.query("SELECT Groups.GroupId,Groups.Minimum, DegreeHasCourseList.Level, Groups.Maximum, Groups.CourseListId, GroupHasCourse.CourseId, Course.Semester, Course.Credit, Course.Name, Course.Level AS LevelX FROM DegreeHasCourseList, Course, Groups INNER JOIN GroupHasCourse ON Groups.CourseListId = GroupHasCourse.CourseListId AND Groups.GroupId = GroupHasCourse.GroupId WHERE DegreeHasCourseList.CourseListId = Groups.CourseListId AND GroupHasCourse.CourseId = Course.CourseId AND Groups.CourseListId IN (SELECT CourseListId FROM DegreeHasCourseList WHERE Degree = ?) ORDER BY DegreeHasCourseList.Level;", degree, function(error, rows, file){
			
			if (error) throw error;
			var info = {};
			console.log(rows);
			for (var i = 0; i<rows.length; i++){
				var Level = rows[i].Level
				var groupNum = rows[i].GroupId;
				var min = rows[i].Minimum;
				var max = rows[i].Maximum;
				var courseInfo = {CourseId: rows[i].CourseId, Name: rows[i].Name, Credit: rows[i].Credit, Semester: rows[i].Semester, Level:rows[i].LevelX}
				if(info[Level] == undefined){
					info[Level] = {};
					info[Level][groupNum] = {}
					info[Level][groupNum].courses = [courseInfo];
					info[Level][groupNum].min = min
					info[Level][groupNum].max = max
				}
				else if(info[Level][groupNum] == undefined){
					info[Level][groupNum] = {}
					info[Level][groupNum].courses = [courseInfo]
					info[Level][groupNum].min = min
					info[Level][groupNum].max = max
				}
				else{
					info[Level][groupNum].courses.push(courseInfo);
				}
			}
			console.log(info)
	    	callback(info);
		});
	}

	var getAllCourses = function(callback){
		var query1 = connection.query("SELECT * FROM Course;", function(error, rows, file){
			if (error) throw error;
			callback(rows);
		});

	}

	var getAllSchools = function(callback){
		var query1 = connection.query("SELECT * FROM School;", function(error, rows, file){
			var info = {};
			for (var i = 0;i<rows.length;i++){
				var school = rows[i].Name;
				var college = rows[i].College
				if(info.college==undefined){
					info[college]=[school]
				}
				else{
					info[college].push(school);
				}
			}
			if (error) throw error;
			callback(info);
		});

	}

	var getAllColleges = function(callback){
		var query1 = connection.query("SELECT Name FROM College;", function(error, rows, file){
			if (error) throw error;
			callback(rows);
		});

	}


	var getCourseListsInfo = function(callback){
		connection.query("Select Groups.GroupId,Minimum, Maximum, Groups.CourseListId, Course.Semester, GroupHasCourse.CourseId, Course.Name, Course.Level, Course.Credit from Course, Groups INNER JOIN GroupHasCourse on Groups.CourseListId = GroupHasCourse.CourseListId AND Groups.GroupId = GroupHasCourse.GroupId WHERE GroupHasCourse.CourseId = Course.CourseId", function(error, rows, file){
			if (error) throw error;
			var info = {};
			for (var i = 0; i<rows.length; i++){
				var courseListId = rows[i].CourseListId;
				var groupNum = rows[i].GroupId;
				var courseInfo = {CourseId: rows[i].CourseId, Name: rows[i].Name, Level: rows[i].Level, Credit: rows[i].Credit, Semester: rows[i].Semester}
				if(info[courseListId] == undefined){
					info[courseListId] = {};
					info[courseListId][groupNum] = [courseInfo];
				}
				else if(info[courseListId][groupNum] == undefined){
					info[courseListId][groupNum] = [courseInfo]
				}
				else{
					info[courseListId][groupNum].push(courseInfo);
				}
			}
	    	callback(info);
		});
	}
	return {deleteDegreeHasCourseListRow:deleteDegreeHasCourseListRow, getAllColleges:getAllColleges, getAllSchools:getAllSchools, getAllCourses:getAllCourses, updateCoursesTaken:updateCoursesTaken,getStudentCourses:getStudentCourses, getAdvisor:getAdvisor, getSchoolCourses: getSchoolCourses, degreeCourseLists: degreeCourseLists, courseLists: courseLists, singleDegree: singleDegree, degrees: degrees, advisees: advisees, studentTakesCourses:studentTakesCourses, updateGroup: updateGroup, updateCourseList: updateCourseList, updateStart: updateStart, validUser:validUser, getCourseListsInfo:getCourseListsInfo, updateDegreeCourseLists:updateDegreeCourseLists, degreeCourseListsTotal:degreeCourseListsTotal};
}